let isCliMode = false;
let commandHistory = [];
let historyIndex = -1;

// Typing Bio Animation
async function typeBio() {
    const bioElement = document.getElementById('typingBio');
    if (!bioElement) return;

    const bioText = [
        "Hello friend, Who am I? I am:",
        "A Jr.Pentester & IT-Security Researcher"
    ];

    bioElement.innerHTML = ''; // Clear previous content

    for (let i = 0; i < bioText.length; i++) {
        const line = document.createElement('div');
        line.className = 'bio-line';
        bioElement.appendChild(line);

        let currentText = '';
        const textToType = bioText[i];
        for (let charIndex = 0; charIndex < textToType.length; charIndex++) {
            currentText += textToType[charIndex];
            line.textContent = currentText;
            if (charIndex === textToType.length - 1) {
                const cursorSpan = document.createElement('span');
                cursorSpan.className = 'typing-cursor';
                line.appendChild(cursorSpan);
            }
            await new Promise(resolve => setTimeout(resolve, 40));
        }

        if (i < bioText.length - 1) {
            const currentCursor = line.querySelector('.typing-cursor');
            if (currentCursor) currentCursor.remove();
            await new Promise(resolve => setTimeout(resolve, 600));
        }
    }
}

// Section Toggling
function toggleSection(sectionId) {
    const sections = ['projects', 'certificates', 'ctf', 'contact'];
    const buttons = document.querySelectorAll('.social-links .gruv-button[onclick^="toggleSection"]');

    buttons.forEach(button => {
        button.classList.remove('active');
        const onclickAttr = button.getAttribute('onclick');
        if (onclickAttr && onclickAttr.includes(`toggleSection('${sectionId}')`)) {
            button.classList.add('active');
        }
    });

    sections.forEach(id => {
        const element = document.getElementById(`${id}Section`);
        if (element) {
            if (id === sectionId) {
                element.classList.remove('hidden');
                setTimeout(() => element.classList.add('visible'), 10);
            } else {
                element.classList.remove('visible');
                 // element.classList.add('hidden'); // Add this back if you want instant display:none after fadeout
            }
        }
    });

    const targetSection = document.getElementById(`${sectionId}Section`);
    if (targetSection && targetSection.classList.contains('visible')) {
        const header = targetSection.querySelector('.section-header') || targetSection;
        header.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
}

// Time-based Greeting
function getGreeting() {
    const hour = new Date().getHours();
    if (hour >= 5 && hour < 12) return 'Good Morning';
    if (hour >= 12 && hour < 17) return 'Good Afternoon';
    if (hour >= 17 && hour < 21) return 'Good Evening';
    return 'Good Night';
}

// Terminal Updates
function updateTerminal() {
    const terminal = document.getElementById('visitorInfo');
    const greeting = getGreeting();
    const randomIP = `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`;

    if (terminal) {
        terminal.innerHTML = `
            <div class="terminal-line">
                <span class="prompt">$</span> ${greeting}, Welcome to 0xb0rn3's portfolio
            </div>
            <div class="terminal-line">
                <span class="prompt">$</span> Connection established... IP: ${randomIP}
            </div>
            <div class="terminal-line">
                <span class="prompt">$</span> User Agent: ${navigator.userAgent.substring(0, 40)}...
            </div>
            <div class="terminal-line">
                <span class="prompt">$</span> Status: <span class="gruv-green">Secure & Ready</span>
            </div>
            <div class="terminal-line">
                <span class="prompt">$</span> Type <span class="gruv-yellow">'help'</span> in CLI (click <i class="fas fa-terminal"></i> icon) for commands.
            </div>
        `;
    }
}

// GitHub Projects Loader
async function loadProjects() {
    const projectsContainer = document.getElementById('github-projects');
    if (!projectsContainer) return;

    projectsContainer.innerHTML = '<div class="terminal-line loading">Fetching projects from GitHub...</div>';

    try {
        const repoResponse = await fetch('https://api.github.com/users/0xb0rn3/repos?sort=updated&direction=desc');
        if (!repoResponse.ok) {
            throw new Error(`GitHub API error (repos): ${repoResponse.status} ${repoResponse.statusText}`);
        }
        let repos = await repoResponse.json();

        repos = repos.filter(repo => !["0xb0rn3.github.io", "0xb0rn3", "b0urn3"].includes(repo.name) && !repo.archived && !repo.fork);

        projectsContainer.innerHTML = '';

        if (repos.length === 0) {
            projectsContainer.innerHTML = '<div class="terminal-line">No public projects to display at the moment. Check back later!</div>';
            return;
        }

        let cardIndex = 0;
        for (const repo of repos) {
            let readmeContentHTML = '<p><em>No README found or it could not be loaded.</em></p>';
            try {
                const readmeResponse = await fetch(`https://api.github.com/repos/0xb0rn3/${repo.name}/readme`);
                if (readmeResponse.ok) {
                    const readmeData = await readmeResponse.json();
                    const readmeMarkdown = atob(readmeData.content);
                    readmeContentHTML = marked.parse(readmeMarkdown);
                } else if (readmeResponse.status === 404) {
                    readmeContentHTML = '<p><em>This project does not have a README.md file.</em></p>';
                } else {
                    console.warn(`Could not fetch README for ${repo.name}: ${readmeResponse.status}`);
                }
            } catch (readmeError) {
                console.error(`Error fetching or parsing README for ${repo.name}:`, readmeError);
            }

            let category = 'Cybersecurity';
            const topics = repo.topics || [];
            const description = repo.description ? repo.description.toLowerCase() : '';
            const repoName = repo.name.toLowerCase();

            if (topics.includes('web-development') || description.includes('web') || repoName.includes('web')) {
                category = 'Web Development';
            } else if (topics.includes('script') || (repo.language && ['Python', 'Shell', 'PowerShell', 'JavaScript'].includes(repo.language)) || description.includes('script') || repoName.includes('script')) {
                category = 'Scripting';
            } else if (topics.includes('tool') || description.includes('tool') || repoName.includes('tool')) {
                category = 'Tools';
            }

            const projectCard = document.createElement('div');
            projectCard.className = 'project-card';
            projectCard.setAttribute('data-category', category);
            projectCard.style.animationDelay = `${cardIndex * 0.07}s`;

            projectCard.innerHTML = `
                <h4 class="project-title">${repo.name}</h4>
                <p class="project-description-github">${repo.description || 'No description available.'}</p>
                <div class="project-readme-content">
                    ${readmeContentHTML}
                </div>
                <div class="project-stats">
                    <span><i class="fas fa-star"></i> ${repo.stargazers_count}</span>
                    <span><i class="fas fa-code-branch"></i> ${repo.forks_count}</span>
                    <span><i class="fas fa-eye"></i> ${repo.watchers_count}</span>
                    ${repo.language ? `<span><i class="fas fa-code"></i> ${repo.language}</span>` : ''}
                </div>
                <a href="${repo.html_url}" target="_blank" rel="noopener noreferrer" class="gruv-button">
                    <i class="fab fa-github"></i> View on GitHub
                </a>
            `;
            projectsContainer.appendChild(projectCard);
            cardIndex++;
        }

    } catch (error) {
        console.error("Error loading projects:", error);
        projectsContainer.innerHTML = `
            <div class="terminal-line gruv-red" style="text-align:center;">
                <i class="fas fa-exclamation-triangle"></i> Error loading projects.
                <br><small>${error.message}. Please check the console or try again later.</small>
            </div>`;
    }
}

// CTF Challenges Data
function loadCTFChallenges() {
    const ctfContainer = document.getElementById('ctf-challenges');
    if (!ctfContainer) return;

    ctfContainer.innerHTML = '';

    const challenges = [
        {
            title: "TryHackMe Profile",
            description: "My public TryHackMe badge showcasing activity, rank, and completed rooms.",
            iframeSrc: "https://tryhackme.com/api/v2/badges/public-profile?userPublicId=4139197",
            type: "badge"
        }
    ];

    if (challenges.length === 0) {
        ctfContainer.innerHTML = '<div class="terminal-line" style="text-align:center;">No CTF stats to display currently.</div>';
        return;
    }
    
    challenges.forEach((challenge, index) => {
        const challengeCard = document.createElement('div');
        challengeCard.className = 'ctf-card';
        challengeCard.style.animationDelay = `${index * 0.1}s`;

        let contentHTML = '';
        if (challenge.type === "badge" && challenge.iframeSrc) {
            contentHTML = `
                <div class="ctf-badge-container">
                    <iframe
                        src="${challenge.iframeSrc}"
                        style="border:none; width:100%; height:300px; background: transparent;"
                        title="${challenge.title} Badge"
                        loading="lazy">
                    </iframe>
                </div>`;
        } else if (challenge.type === "custom" && challenge.htmlContent) {
            contentHTML = challenge.htmlContent;
        }

        challengeCard.innerHTML = `
            <h4 class="ctf-title">${challenge.title}</h4>
            <p class="project-description" style="margin-bottom: 1rem;">${challenge.description}</p>
            ${contentHTML}
        `;
        ctfContainer.appendChild(challengeCard);
    });
}

// CLI Mode Functionality
const cliContainer = document.getElementById('cliContainer');
const bunnyTrigger = document.getElementById('bunnyTrigger');
const mainContainer = document.querySelector('.container');
const cliOutput = document.getElementById('cliOutput');
const cliCommandInput = document.getElementById('cliCommand');

function toggleCliMode() {
    isCliMode = !isCliMode;
    if (cliContainer && bunnyTrigger && mainContainer) {
        if (isCliMode) {
            cliContainer.classList.remove('hidden');
            setTimeout(() => {
                if(cliCommandInput) cliCommandInput.focus();
            }, 50);
            if (!cliOutput.innerHTML.includes("0xb0rn3's Portfolio CLI")) {
                printCliWelcome();
            }
            mainContainer.classList.add('hidden');
            bunnyTrigger.classList.add('hidden');
        } else {
            cliContainer.classList.add('hidden');
            mainContainer.classList.remove('hidden');
            bunnyTrigger.classList.remove('hidden');
        }
    }
}

function printToCli(htmlContent, isCommand = false, commandText = '') {
    if (!cliOutput) return;
    if (isCommand && commandText) {
        const sanitizedCommand = commandText.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        cliOutput.innerHTML += `<div class="terminal-line"><span class="prompt gruv-green">$</span> ${sanitizedCommand}</div>`;
    }
    cliOutput.innerHTML += `<div class="terminal-line">${htmlContent}</div>`;
    cliOutput.scrollTop = cliOutput.scrollHeight;
}

function printCliWelcome() {
    if (!cliOutput) return;
    const welcomeMessage = `
        <div class="terminal-line gruv-purple">0xb0rn3's Portfolio CLI v0.0.5 (Enhanced)</div>
        <div class="terminal-line">Type <span class="gruv-yellow">"help"</span> for available commands. Type <span class="gruv-red">"exit"</span> to return to GUI.</div>
        <div class="terminal-line">-------------------------------------------------------------------</div>
    `;
    if (cliOutput.innerHTML.trim() === '' || cliOutput.querySelectorAll('.terminal-line').length <= 1) {
        cliOutput.innerHTML = welcomeMessage;
    } else {
         cliOutput.innerHTML += welcomeMessage;
    }
    cliOutput.scrollTop = cliOutput.scrollHeight;
}

const techQuotes = [
    "The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guards - and even then I have my doubts. - Gene Spafford",
    "Privacy is not something that I'm merely entitled to, it's an absolute prerequisite. - Adapted",
    "Passwords are like underwear: don't leave them lying around, change them regularly, and don't share them with strangers.",
    "The best way to predict the future is to invent it. - Alan Kay",
    "There are 10 types of people in the world: those who understand binary, and those who don't.",
    "Talk is cheap. Show me the code. - Linus Torvalds",
    "Code is like humor. When you have to explain it, it’s bad. – Cory House",
    "The quieter you become, the more you are able to hear. - Kali Linux Motto"
];

const cliCommands = {
    help: () => `
        <span class="gruv-yellow">Available commands:</span><br>
        &nbsp;&nbsp;- <span class="gruv-green">help</span>         Show this help message<br>
        &nbsp;&nbsp;- <span class="gruv-green">about</span>        Display profile information<br>
        &nbsp;&nbsp;- <span class="gruv-green">projects</span>     View projects (opens GUI section)<br>
        &nbsp;&nbsp;- <span class="gruv-green">certificates</span> Show certifications (opens GUI section)<br>
        &nbsp;&nbsp;- <span class="gruv-green">ctf</span>          Display CTF stats (opens GUI section)<br>
        &nbsp;&nbsp;- <span class="gruv-green">contact</span>      Show contact details<br>
        &nbsp;&nbsp;- <span class="gruv-green">skills</span>       List technical skills<br>
        &nbsp;&nbsp;- <span class="gruv-green">theme</span> [dark|light] Switch theme<br>
        &nbsp;&nbsp;- <span class="gruv-green">social</span>       List social media links<br>
        &nbsp;&nbsp;- <span class="gruv-green">fetch</span> [ip|useragent|time|date|datetime] Get visitor/system info<br>
        &nbsp;&nbsp;- <span class="gruv-green">banner</span>       Display ASCII art banner<br>
        &nbsp;&nbsp;- <span class="gruv-green">quote</span>        Display a random tech/cybersecurity quote<br>
        &nbsp;&nbsp;- <span class="gruv-green">whoami</span>       Display visitor session information<br>
        &nbsp;&nbsp;- <span class="gruv-green">date</span>         Show current date and time<br>
        &nbsp;&nbsp;- <span class="gruv-green">time</span>         Show current time (alias for date)<br>
        &nbsp;&nbsp;- <span class="gruv-green">matrix</span>       Enter the Matrix (visual effect - basic)<br>
        &nbsp;&nbsp;- <span class="gruv-green">clear</span>        Clear the terminal output<br>
        &nbsp;&nbsp;- <span class="gruv-red">exit</span>         Return to GUI mode
    `,
    about: () => `
        <span class="gruv-blue">Name:</span> Christian Isaac .S<br>
        <span class="gruv-blue">Alias:</span> 0xb0rn3 | 0xbv1<br>
        <span class="gruv-blue">Role:</span> Jr.Pentester & IT-Security Researcher<br>
        <span class="gruv-blue">Bio:</span> ${(document.getElementById('typingBio')?.textContent || 'Loading bio...').replace("Hello friend, Who am I? I am: ", "")}
    `,
    projects: () => { toggleCliMode(); toggleSection('projects'); return `<span class="gruv-yellow">Switching to GUI:</span> Projects section activated.`; },
    certificates: () => { toggleCliMode(); toggleSection('certificates'); return `<span class="gruv-yellow">Switching to GUI:</span> Certificates section activated.`; },
    ctf: () => { toggleCliMode(); toggleSection('ctf'); return `<span class="gruv-yellow">Switching to GUI:</span> CTF section activated.`; },
    contact: () => `
        <span class="gruv-blue">Email:</span> <a href="mailto:q4n0@proton.me" class="gruv-green" target="_blank" rel="noopener noreferrer">q4n0@proton.me</a><br>
        <span class="gruv-blue">Phone:</span> +255 753 066 570 (TZ)<br>
        <span class="gruv-blue">LinkedIn:</span> <a href="https://linkedin.com/in/0xb0rn3" class="gruv-green" target="_blank" rel="noopener noreferrer">linkedin.com/in/0xb0rn3</a>
    `,
    skills: () => `
        <span class="gruv-yellow">Technical Skills:</span><br>
        &nbsp;&nbsp;- Penetration Testing (Web, Network, Basic Mobile)<br>
        &nbsp;&nbsp;- Vulnerability Assessment & Management<br>
        &nbsp;&nbsp;- Security Research & Threat Analysis<br>
        &nbsp;&nbsp;- Linux/Unix Systems Administration & Hardening<br>
        &nbsp;&nbsp;- Scripting: Python, Bash, PowerShell, JavaScript<br>
        &nbsp;&nbsp;- SIEM & Log Analysis (Basic)<br>
        &nbsp;&nbsp;- Network Security (Firewalls, IDS/IPS Concepts)<br>
        &nbsp;&nbsp;- Web Technologies (HTML, CSS, JavaScript, Basic Backend)<br>
        &nbsp;&nbsp;- OSINT & Digital Forensics (Foundational)
    `,
    theme: (args) => {
        const newTheme = args[0]?.toLowerCase();
        const body = document.body;
        const icon = document.getElementById('themeIcon');
        if (newTheme === 'light') {
            body.classList.add('light-theme');
            if(icon) { icon.classList.remove('fa-moon'); icon.classList.add('fa-sun'); }
            return "Theme changed to <span class='gruv-yellow'>Light Mode</span>.";
        } else if (newTheme === 'dark') {
            body.classList.remove('light-theme');
            if(icon) { icon.classList.remove('fa-sun'); icon.classList.add('fa-moon'); }
            return "Theme changed to <span class='gruv-blue'>Dark Mode</span>.";
        }
        return `Usage: theme [dark|light]. Current theme is ${body.classList.contains('light-theme') ? 'Light' : 'Dark'}.`;
    },
    social: () => `
        <span class="gruv-yellow">Connect with me:</span><br>
        &nbsp;&nbsp;- <i class="fab fa-github gruv-purple"></i> GitHub: <a href="https://github.com/0xb0rn3" target="_blank" rel="noopener noreferrer" class="gruv-green">github.com/0xb0rn3</a><br>
        &nbsp;&nbsp;- <i class="fab fa-linkedin gruv-blue"></i> LinkedIn: <a href="https://linkedin.com/in/0xb0rn3" target="_blank" rel="noopener noreferrer" class="gruv-green">linkedin.com/in/0xb0rn3</a><br>
        &nbsp;&nbsp;- <i class="fab fa-twitter gruv-blue"></i> X (Twitter): <a href="https://x.com/0xbv1" target="_blank" rel="noopener noreferrer" class="gruv-green">x.com/0xbv1</a><br>
        &nbsp;&nbsp;- <i class="fab fa-discord gruv-purple"></i> Discord: <span class="gruv-green">0xbv1</span> (User ID: 700257306645037056)<br>
        &nbsp;&nbsp;- <i class="fab fa-instagram gruv-pink"></i> Instagram: <a href="https://instagram.com/theehiv3" target="_blank" rel="noopener noreferrer" class="gruv-green">instagram.com/theehiv3</a>
    `,
    fetch: (args) => {
        const param = args[0]?.toLowerCase();
        const now = new Date();
        const randomIP = `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`;
        if (param === 'ip') {
             return `Simulated Client IP: <span class="gruv-green">${randomIP}</span><br>(Note: This is for demonstration. For GeoIP lookup: <a href="https://www.whatismyip.com/ip-address-lookup/${randomIP}" target="_blank" rel="noopener noreferrer" class="gruv-blue">Check GeoIP for ${randomIP}</a>)`;
        }
        if (param === 'useragent') return `User Agent: <span class="gruv-green">${navigator.userAgent}</span>`;
        if (param === 'time') return `Current Client Time: <span class="gruv-green">${now.toLocaleTimeString()}</span>`;
        if (param === 'date') return `Current Client Date: <span class="gruv-green">${now.toLocaleDateString()}</span>`;
        if (param === 'datetime') return `Current Client Date & Time: <span class="gruv-green">${now.toLocaleString()}</span>`;
        return `Usage: fetch [ip|useragent|time|date|datetime]`;
    },
    banner: () => {
        const asciiArt = `
<span class="cli-banner">
  ██████╗ ██╗   ██╗██████╗ ███╗   ██╗███████╗    ██████╗     ██████╗ 
 ██╔════╝ ██║   ██║╚════██╗████╗  ██║██╔════╝    ╚════██╗    ╚════██╗
 ██║  ███╗██║   ██║ █████╔╝██╔██╗ ██║█████╗█████╗ █████╔╝    █████╔╝
 ██║   ██║██║   ██║ ╚═══██╗██║╚██╗██║██╔══╝╚════╝██╔═══╝     ╚═══██╗
 ╚██████╔╝╚██████╔╝██████╔╝██║ ╚████║███████╗    ███████╗    ██████╔╝
  ╚═════╝  ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝    ╚══════╝    ╚═════╝ 
</span>                                                              
        <span class="gruv-yellow">Welcome to the 0xb0rn3 Portfolio CLI!</span>
`;
        return asciiArt.replace(/\n/g, '<br>');
    },
    quote: () => {
        const randomIndex = Math.floor(Math.random() * techQuotes.length);
        return `<span class="gruv-pink">"${techQuotes[randomIndex]}"</span>`;
    },
    date: () => {
        const now = new Date();
        return `Current Client Date: <span class="gruv-green">${now.toLocaleDateString()}</span><br>Current Client Time: <span class="gruv-green">${now.toLocaleTimeString()}</span>`;
    },
    time: () => cliCommands.date(),
    whoami: () => {
        return `
            <span class="gruv-yellow">User Information:</span><br>
            &nbsp;&nbsp;- <span class="gruv-blue">User:</span> visitor<br>
            &nbsp;&nbsp;- <span class="gruv-blue">Privileges:</span> guest<br>
            &nbsp;&nbsp;- <span class="gruv-blue">Host:</span> 0xb0rn3-portfolio (client-side emulation)<br>
            &nbsp;&nbsp;- <span class="gruv-blue">Session Start:</span> ${new Date(document.lastModified).toLocaleTimeString()} (approx.)
        `;
    },
    matrix: () => {
        return `<span class="gruv-green">Entering the Matrix...</span> (Well, not really. This is a placeholder!)`;
    },
    clear: () => {
        if(cliOutput) cliOutput.innerHTML = '';
        printCliWelcome();
        return '';
    }
};

function handleCommand(fullCommand) {
    const trimmedCommand = fullCommand.trim();
    if (!trimmedCommand && cliOutput) {
        printToCli('', true, '');
        return;
    }

    const parts = trimmedCommand.toLowerCase().split(' ');
    const command = parts[0];
    const args = parts.slice(1);

    printToCli('', true, trimmedCommand);

    if (command === 'exit') {
        toggleCliMode();
        return;
    }

    const responseFunction = cliCommands[command];
    let response;

    if (responseFunction) {
        response = typeof responseFunction === 'function' ? responseFunction(args) : responseFunction;
    } else {
        response = `<span class="gruv-red">Command not found:</span> ${command}. Type "help" for available commands.`;
    }

    if (response) printToCli(response);
}

// Scroll to Top Button Functionality
const scrollToTopBtn = document.getElementById('scrollToTopBtn');

function checkScroll() {
    if (!scrollToTopBtn) return;
    if (window.scrollY > 300 || document.documentElement.scrollTop > 300) {
        scrollToTopBtn.classList.remove('hidden');
    } else {
        scrollToTopBtn.classList.add('hidden');
    }
}

function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    updateTerminal();
    loadProjects();
    typeBio();
    loadCTFChallenges();

    if (bunnyTrigger) bunnyTrigger.addEventListener('click', toggleCliMode);
    
    if (cliCommandInput) {
        cliCommandInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const commandText = e.target.value.trim();
                if (commandText && (commandHistory.length === 0 || commandHistory[commandHistory.length - 1] !== commandText)) {
                    commandHistory.push(commandText);
                }
                historyIndex = commandHistory.length;
                handleCommand(commandText);
                e.target.value = '';
            }
        });
        cliCommandInput.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowUp') {
                if (historyIndex > 0) {
                    historyIndex--;
                    e.target.value = commandHistory[historyIndex];
                    e.target.setSelectionRange(e.target.value.length, e.target.value.length);
                }
                e.preventDefault();
            } else if (e.key === 'ArrowDown') {
                if (historyIndex < commandHistory.length - 1) {
                    historyIndex++;
                    e.target.value = commandHistory[historyIndex];
                    e.target.setSelectionRange(e.target.value.length, e.target.value.length);
                } else {
                    historyIndex = commandHistory.length;
                    e.target.value = '';
                }
                e.preventDefault();
            } else if (e.key === 'Tab') {
                e.preventDefault();
                const currentInput = e.target.value.toLowerCase().trim().split(' ')[0];
                if (!currentInput) return;

                const suggestions = Object.keys(cliCommands).filter(cmd => cmd.startsWith(currentInput));
                if (suggestions.length === 1) {
                    e.target.value = suggestions[0] + ' ';
                } else if (suggestions.length > 1) {
                    printToCli(`Suggestions: <span class="gruv-yellow">${suggestions.join(', ')}</span>`);
                }
            }
        });
        cliCommandInput.addEventListener('focus', function() {
            setTimeout(() => {
                this.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }, 100);
        });
    }

    const themeToggleButton = document.getElementById('themeToggle');
    if (themeToggleButton) {
        themeToggleButton.addEventListener('click', () => {
            document.body.classList.toggle('light-theme');
            const icon = document.getElementById('themeIcon');
            if (icon) {
                if (document.body.classList.contains('light-theme')) {
                    icon.classList.remove('fa-moon'); icon.classList.add('fa-sun');
                } else {
                    icon.classList.remove('fa-sun'); icon.classList.add('fa-moon');
                }
            }
        });
    }

    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            const filter = btn.getAttribute('data-filter');
            const projects = document.querySelectorAll('#github-projects .project-card');
            let visibleCount = 0;
            projects.forEach((project) => {
                const projectCategory = project.getAttribute('data-category');
                const matchesFilter = (filter === 'all' || projectCategory === filter);
                
                if (matchesFilter) {
                    project.style.display = 'flex';
                    project.style.animationDelay = `${visibleCount * 0.07}s`;
                    project.classList.remove('fadeInSlideUpItem');
                    void project.offsetWidth;
                    project.classList.add('fadeInSlideUpItem');
                    visibleCount++;
                } else {
                    project.style.display = 'none';
                }
            });
        });
    });
    
    if (scrollToTopBtn) {
        window.addEventListener('scroll', checkScroll);
        scrollToTopBtn.addEventListener('click', scrollToTop);
    }

    const initialSection = 'projects';
    toggleSection(initialSection);
    ['certificates', 'ctf', 'contact'].forEach(id => {
        if (id !== initialSection) {
            const el = document.getElementById(`${id}Section`);
            if (el) {
                el.classList.remove('visible');
                el.classList.add('hidden');
            }
        }
    });
});