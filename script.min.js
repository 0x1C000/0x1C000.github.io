// script.min.js

let isCliMode = false;
let commandHistory = [];
let historyIndex = -1;

// Typing Bio Animation
async function typeBio() {
    const bioElement = document.getElementById('typingBio');
    if (!bioElement) return;

    const bioText = [
        "Hello friend, Who am I? I am:",
        "A Jr. Pentester Student & IT Security Research Student"
    ];

    bioElement.innerHTML = ''; // clear

    for (let i = 0; i < bioText.length; i++) {
        const line = document.createElement('div');
        line.className = 'bio-line';
        bioElement.appendChild(line);

        let current = '';
        for (let j = 0; j < bioText[i].length; j++) {
            current += bioText[i][j];
            line.textContent = current;
            if (j === bioText[i].length - 1) {
                const cursor = document.createElement('span');
                cursor.className = 'typing-cursor';
                line.appendChild(cursor);
            }
            await new Promise(r => setTimeout(r, 40));
        }
        if (i < bioText.length - 1) {
            const cursor = line.querySelector('.typing-cursor');
            if (cursor) cursor.remove();
            await new Promise(r => setTimeout(r, 600));
        }
    }
}

// Section Toggling
function toggleSection(sectionId) {
    ['projects','certificates','ctf','contact'].forEach(id => {
        const sec = document.getElementById(id + 'Section');
        if (!sec) return;
        if (id === sectionId) {
            sec.classList.remove('hidden');
            sec.classList.add('visible');
        } else {
            sec.classList.remove('visible');
            sec.classList.add('hidden');
        }
    });
    document.querySelectorAll('.social-links .gruv-button').forEach(btn => {
        const onclick = btn.getAttribute('onclick') || '';
        btn.classList.toggle('active', onclick.includes(`toggleSection('${sectionId}')`));
    });
}

// Time-based Greeting
function getGreeting() {
    const h = new Date().getHours();
    if (h < 12) return 'Good Morning';
    if (h < 17) return 'Good Afternoon';
    if (h < 21) return 'Good Evening';
    return 'Good Night';
}

// Populate visitor-info
function updateTerminal() {
    const term = document.getElementById('visitorInfo');
    if (!term) return;
    const greeting = getGreeting();
    const ip = Array.from({length:4},_=>Math.floor(Math.random()*256)).join('.');
    term.innerHTML = `
        <div class="terminal-line"><span class="prompt">$</span> ${greeting}, Welcome to 0x1C's portfolio</div>
        <div class="terminal-line"><span class="prompt">$</span> Connection established... IP: ${ip}</div>
        <div class="terminal-line"><span class="prompt">$</span> User Agent: ${navigator.userAgent.substring(0,40)}...</div>
        <div class="terminal-line"><span class="prompt">$</span> Status: <span class="gruv-green">Secure & Ready</span></div>
        <div class="terminal-line"><span class="prompt">$</span> Type <span class="gruv-yellow">'help'</span> in CLI (<i class="fas fa-terminal"></i>) for commands.</div>
    `;
}

// Load static projects from data/repos.json
async function loadProjects() {
    const container = document.getElementById('github-projects');
    if (!container) return;
    container.innerHTML = '<div class="terminal-line loading">Loading projects...</div>';
    try {
        const resp = await fetch('/data/repos.json');
        if (!resp.ok) throw new Error(resp.statusText);
        const repos = await resp.json();
        container.innerHTML = '';
        repos.forEach((repo, idx) => {
            const card = document.createElement('div');
            const cat = (repo.language || '').toLowerCase().replace(/[^a-z0-9]/g, '-');
            card.className = `project-card ${cat}`;
            card.style.animationDelay = `${idx * 0.07}s`;
            card.innerHTML = `
                <h3 class="project-title">
                  <a href="${repo.html_url}" target="_blank">${repo.name}</a>
                </h3>
                <p class="project-description-github">
                  ${repo.description || 'No description available.'}
                </p>
                ${repo.language ? `<p class="project-info"><strong>Language:</strong> ${repo.language}</p>` : ''}
                <div class="project-stats">
                  <span><i class="fas fa-star"></i> ${repo.stargazers_count}</span>
                  <span><i class="fas fa-code-branch"></i> ${repo.forks_count}</span>
                  <span><i class="fas fa-eye"></i> ${repo.watchers_count}</span>
                </div>
                <a href="${repo.html_url}" target="_blank" class="gruv-button">
                  <i class="fab fa-github"></i> View on GitHub
                </a>
            `;
            container.appendChild(card);
        });
    } catch (e) {
        console.error(e);
        container.innerHTML = `<div class="terminal-line gruv-red">Error loading projects: ${e.message}</div>`;
    }
}


// Load CTF badge
function loadCTFChallenges() {
    const ctf = document.getElementById('ctf-challenges');
    if (!ctf) return;
    ctf.innerHTML = '';
    const badge = `
      <div class="ctf-badge-container">
        <iframe
          src="https://tryhackme.com/api/v2/badges/public-profile?userPublicId=4739468"
          style="border:none;width:100%;height:300px;"
          loading="lazy"></iframe>
      </div>
    `;
    const card = document.createElement('div');
    card.className = 'ctf-card';
    card.innerHTML = `
      <h4 class="ctf-title">TryHackMe Profile</h4>
      <p class="project-description" style="margin-bottom:1rem;">
        My public TryHackMe badge showcasing activity and rank.
      </p>
      ${badge}
    `;
    ctf.appendChild(card);
}

// CLI command definitions
const techQuotes = [
  "The only truly secure system is one that is powered off... - Gene Spafford",
  "Privacy is not something that I'm merely entitled to...",
  "Passwords are like underwear: don't share them.",
  "The best way to predict the future is to invent it. - Alan Kay",
  "Talk is cheap. Show me the code. - Linus Torvalds",
  "Code is like humor. When you have to explain it, itâ€™s bad.",
  "The quieter you become, the more you are able to hear."
];

const cliCommands = {
  help: () => `
    <span class="gruv-yellow">Available commands:</span><br>
    help - Show this message<br>
    about - Display profile info<br>
    projects - View projects<br>
    certificates - View certifications<br>
    ctf - View CTF stats<br>
    contact - Show contact info<br>
    skills - List technical skills<br>
    theme [dark|light] - Toggle theme<br>
    social - Social links<br>
    fetch [ip|useragent|time|date|datetime] - System info<br>
    banner - ASCII art banner<br>
    quote - Random tech quote<br>
    whoami - Session info<br>
    date - Show date/time<br>
    time - Alias for date<br>
    matrix - Enter the Matrix (visual effect)<br>
    clear - Clear CLI<br>
    exit - Return to GUI
  `,
  about: () => `
    <strong>Name:</strong> 0x1C<br>
    <strong>Role:</strong> Jr. Pentester Student & IT Security Research Student<br>
    <strong>Bio:</strong> ${(document.getElementById('typingBio')?.textContent||'')}
  `,
  projects: () => { toggleCliMode(); toggleSection('projects'); return `<span class="gruv-yellow">Switched to Projects GUI</span>`; },
  certificates: () => { toggleCliMode(); toggleSection('certificates'); return `<span class="gruv-yellow">Switched to Certifications GUI</span>`; },
  ctf: () => { toggleCliMode(); toggleSection('ctf'); return `<span class="gruv-yellow">Switched to CTF GUI</span>`; },
  contact: () => `
    <strong>Email:</strong> <a href="mailto:0x1C0@protonmail.com">0x1C0@protonmail.com</a><br>
    <strong>Telegram:</strong> <a href="https://t.me/Ox1C0" target="_blank">t.me/Ox1C0</a>
  `,
  skills: () => `
    Penetration Testing Student with OSINT experience, bash scripting,
    python and WebSite creation.
  `,
  theme: args => {
    const light = args[0] === 'light';
    document.body.classList.toggle('light-theme', light);
    const icon = document.getElementById('themeIcon');
    if (icon) icon.classList.toggle('fa-sun', light);
    return `Theme: ${light?'Light':'Dark'}`;
  },
  social: () => `
    <i class="fab fa-github"></i> <a href="https://github.com/0x1C000" target="_blank">GitHub</a><br>
    <i class="fab fa-instagram"></i> <a href="https://www.instagram.com/ox1c__/" target="_blank">Instagram</a>
  `,
  fetch: args => {
    const now = new Date();
    switch(args[0]) {
      case 'ip': return Array.from({length:4},_=>Math.floor(Math.random()*256)).join('.');
      case 'useragent': return navigator.userAgent;
      case 'time': return now.toLocaleTimeString();
      case 'date': return now.toLocaleDateString();
      case 'datetime': return now.toLocaleString();
      default: return 'Usage: fetch [ip|useragent|time|date|datetime]';
    }
  },
 banner: () => `
  <pre class="cli-banner">
  e88 88e              d88   e88'Y88 
 d888 888b   Y8b Y8Y  d888  d888  'Y 
C8888 8888D   Y8b Y  d"888 C8888     
 Y888 888P   e Y8b     888  Y888  ,d 
  "88 88"   d8b Y8b    888   "88,d88 
                                     
  </pre>
  <span class="gruv-yellow">Welcome to 0x1C Portfolio CLI!</span>
`,

  quote: () => techQuotes[Math.floor(Math.random()*techQuotes.length)],
  whoami: () => `Session start: ${new Date(document.lastModified).toLocaleString()}`,
  clear: () => { const o=document.getElementById('cliOutput'); if(o) o.innerHTML=''; return ''; }
};

// Toggle CLI / GUI
function toggleCliMode() {
    isCliMode = !isCliMode;
    document.querySelector('.container').classList.toggle('hidden', isCliMode);
    document.getElementById('cliContainer').classList.toggle('hidden', !isCliMode);
    document.getElementById('bunnyTrigger').classList.toggle('hidden', isCliMode);
    if (isCliMode) {
      printCliWelcome();
      document.getElementById('cliCommand').focus();
    }
}

function printCliWelcome() {
    const out = document.getElementById('cliOutput');
    if (!out) return;
    out.innerHTML = `
      <div class="terminal-line gruv-purple">0x1C Portfolio CLI v0.1</div>
      <div class="terminal-line">Type <span class="gruv-yellow">help</span> for commands.</div>
    `;
}

function printToCli(html, isCmd=false, cmdText='') {
    const out = document.getElementById('cliOutput');
    if (!out) return;
    if (isCmd) out.innerHTML += `<div class="terminal-line"><span class="prompt">$</span> ${cmdText}</div>`;
    out.innerHTML += `<div class="terminal-line">${html}</div>`;
    out.scrollTop = out.scrollHeight;
}

function handleCommand(input) {
    const parts = input.trim().split(/\s+/);
    const cmd = parts[0];
    const args = parts.slice(1);
    printToCli('', true, input);
    if (cmd === 'exit') { toggleCliMode(); return; }
    const fn = cliCommands[cmd];
    const res = fn ? fn(args) : `<span class="gruv-red">Unknown command:</span> ${cmd}`;
    if (res) printToCli(res);
}

// Scroll-to-top
function checkScroll() {
    const btn = document.getElementById('scrollToTopBtn');
    if (!btn) return;
    if (window.scrollY > 300) btn.classList.remove('hidden');
    else btn.classList.add('hidden');
}

// Init on DOM ready
document.addEventListener('DOMContentLoaded', () => {
    updateTerminal();
    typeBio();
    loadProjects();
    loadCTFChallenges();

    document.getElementById('bunnyTrigger')?.addEventListener('click', toggleCliMode);
    document.getElementById('themeToggle')?.addEventListener('click', () => {
      document.body.classList.toggle('light-theme');
      document.getElementById('themeIcon')?.classList.toggle('fa-sun');
    });
    document.getElementById('scrollToTopBtn')?.addEventListener('click', () => window.scrollTo({top:0,behavior:'smooth'}));
    window.addEventListener('scroll', checkScroll);

    const cliInput = document.getElementById('cliCommand');
    cliInput?.addEventListener('keypress', e => {
      if (e.key === 'Enter') {
        const v = e.target.value.trim();
        if (v && commandHistory[commandHistory.length-1] !== v) commandHistory.push(v);
        historyIndex = commandHistory.length;
        handleCommand(v);
        e.target.value = '';
      }
    });
    cliInput?.addEventListener('keydown', e => {
      if (e.key === 'ArrowUp' && historyIndex>0) {
        historyIndex--; cliInput.value = commandHistory[historyIndex];
      }
      if (e.key === 'ArrowDown') {
        if (historyIndex<commandHistory.length-1) {
          historyIndex++; cliInput.value = commandHistory[historyIndex];
        } else {
          historyIndex = commandHistory.length; cliInput.value = '';
        }
      }
    });

    toggleSection('projects');
});
